{"version":3,"sources":["graph-tool/components/ToolBarComponents.js","graph-tool/assets/Colors.js","graph-tool/data-structures/Action.js","graph-tool/functions/Geometry.js","graph-tool/data-structures/heaps/MinHeap.js","graph-tool/functions/Transformations.js","graph-tool/functions/Rendering.js","graph-tool/components/RenderingComponents.js","graph-tool/functions/Graphing.js","graph-tool/components/GraphProps.js","graph-tool/components/StateManagerComponents.js","graph-tool/functions/Visualizations.js","graph-tool/components/CommandLineInterface.js","graph-tool/components/CommandList.js","graph-tool/components/ShareComponent.js","graph-tool/data-structures/RawGraph.js","graph-tool/data-structures/Edge.js","graph-tool/data-structures/Node.js","graph-tool/data-structures/Graph.js","graph-tool/data-structures/BoundedStack.js","graph-tool/data-structures/CommandLine.js","graph-tool/functions/CommandParsing.js","graph-tool/functions/JSONParser.js","graph-tool/GraphTool.js","graph-tool/functions/Downloads.js","components/home/Home.js","components/menubar/MenuBar.js","components/tutorial/Tutorial.js","components/devblog/DevBlog.js","App.js","index.js"],"names":["GraphToolBar","changeFunc","this","props","toolSettings","className","key","name","settings","min","max","setting","React","Component","ToolBarSlider","inputRef","createRef","valueChange","bind","e","rawStr","current","value","num","parseInt","length","isNaN","paddedNum","Math","type","title","defaultValue","onInput","ref","ToolBarColorPicker","state","colors","selectedInd","i","setState","map","item","index","style","backgroundColor","border","onClick","changeColor","Action","priv","privateString","publicString","makePublicString","label","u","v","node","colorLetter","edge","s","edgeClicked","mx","my","dims","tol","fn","tn","scaledFn","toScale","scaledTn","frad","radius","trad","angle","angleBetween","perp","PI","padf","add","baseVectors","padt","subtract","bent","mid","scale","uvDist","dist","bez","toMinmap","fakeBezNode","x","y","ub","vb","offset","ur","ul","ll","lenY","lenX","newXVec","newYVec","lmp","projXLen","dot","len","projYLen","projectsOntoNewX","abs","projectsOntoNewY","v1","v2","dx","dy","sqrt","atan2","w","h","ang","cos","sin","MinHeap","A","parent","floor","left","right","insert","elt","push","decreaseKey","exchange","extractMin","shift","unshift","pop","minHeapify","l","r","indexOf","delt","getKey","i2","temp","isEmpty","clear","graph","actions","getNodeVisuals","forEach","deleteNode","nodeLabel","hasNode","getAllEdgesIncidentOn","removeEdge","removeNode","exhaustiveDFS","raw","nodes","Object","keys","al","trees","colorOf","d","f","time","outputDFS","DFS","treeName","substring","tree","finished","root","toString","getAdjacencyList","child","prim","weighted","directed","queue","parentOf","clone","hasOwnProperty","pq","adjU","getWeight","vind","remainingEdgeVisualKeys","entries","u2","hasEdge","fillCircle","ctx","canvas","cx","cy","rad","color","getCanvasDimensions","beginPath","arc","fillStyle","fill","lineWidth","strokeStyle","stroke","fillText","msg","size","font","drawEdge","bs","selected","bendstyle","Gmy","offsetf","offsett","otherf","othert","weightPos","weight","eulerianMarker","moveTo","lineTo","quadraticCurveTo","closePath","arrowAng","context","tox","toy","arrowHead","width","height","GraphRender","selectedNode","selectedEdges","mouseDown","mouseUp","mouseMove","renderGraph","handleKeyPress","canvasRef","toDataURL","edges","getEdgeVisuals","se","splice","getMouseInput","mm","clickedNode","nodeClicked","clickedEdge","nodeSelected","manageEdgeSelection","nodeCount","getNextNodeLabel","nodeToAdd","addNode","handleActions","addEdge","movingNode","keyCode","cmds","Transformations","rect","getBoundingClientRect","clientX","clientY","top","id","onMouseUp","onMouseDown","onMouseMove","document","addEventListener","window","fixCanvasDimensions","removeEventListener","clientWidth","clientHeight","getContext","clearRect","textAlign","textBaseline","Renderer","getNodes","dag","cycle","discovered","BFS","bipartite","depthLevel","exhaustiveBFS","ccs","nonSingletons","outputBFS","acyclic","forest","GraphPropsList","propsOutput","underlyingGraph","getUnderlyingGraph","outputKos","getTranspose","sort","first","second","keyValPair","sccs","kosaraju","GraphProp","outputEul","hamStr","maxDegree","minDegree","eulerian","hamiltonian","hamDeg","childCount","eulerianAndHamiltonian","string","StateManager","clearFunc","undo","undoFunc","redo","redoFunc","disabled","canUndo","canRedo","defaultChecked","cb","target","checked","edgeCount","obj","rgbCol","isNode","prev","curr","getEdge","stoerWagnerHelp","visited","adjList","toAdd","largestConnection","other","weightToVisited","vNode","t","filter","merge","cutOfThePhase","increaseWeight","completelyRemoveNode","g1","g2","CLI","bottomRef","status","error","handleCommand","line","cmdList","cl","clState","includes","split","cmd","src","pc","parseCommand","undefined","setWeight","getRawGraph","removedEdge","n","fNode","tNode","Visualizations","ncolor","goodCols","node2","col","transposeEdges","a","b","transpose","scc","scc1","scc2","nodes1","nodes2","con","j","sccEdge","vInd","currParent","getEdges","rawNodes","next","currentNode","circuit","mark","rawccs","Graphing","fg1","fg2","minCut","group1","gn","group2","n1","n2","err","lineArr","asList","onKeyDown","placeholder","scrollIntoView","behavior","scrollToBottom","Command","desc","constraints","CommandList","ShareSect","fileInputRef","files","downloadPng","downloadJSON","readInJSON","accept","RawGraph","simple","hasIt","gc","ug","gt","Edge","hamiltonianMarker","Node","Graph","changeProp","arguments","edgeKey","opkey","uNode","edgeColor","nodeKey","randPos","nextRandomNodePos","nodeRadius","nodeColor","values","dst","nums","BoundedStack","stack","empty","peek","asSet","CommandLine","list","history","addCommand","join","removeLastCommand","addFromHistory","p","params","param","Parser","concat","parseJSONInput","fgraph","tgraph","nv","nvl","ev","evl","str","match","COLOR_REGEX","isColor","GraphTool","undoStack","redoStack","commandLine","changeToolSetting","changeGraphSetting","renderingRef","shareSectRef","uri","element","createElement","setAttribute","display","body","appendChild","click","removeChild","Downloads","getPngURI","json","dataStr","encodeURIComponent","JSON","stringify","file","getFile","reader","FileReader","readAsText","onload","makeGraph","parse","result","alert","forceUpdate","Array","isArray","redoActions","lastActions","undoActions","Home","alt","href","to","Tutorial","DevBlog","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3954caed.chunk.js","sourcesContent":["import React from 'react'\nimport './css/ToolBar.css'\nimport * as Colors from '../assets/Colors.js'\n\nexport class GraphToolBar extends React.Component {\n    render() {\n        const changeFunc = this.props.changeFunc\n        const toolSettings = this.props.toolSettings\n        return [\n            <div className = 'toolbar-sect' key = 'nodeProps'>\n                <div className = 'section-label'> Node Properties </div>\n                <div className = 'toolbar-sect-content'>\n                    <ToolBarSlider name={'radius'} settings={toolSettings} min={5} max={20} setting={'nodeRadius'} changeFunc={changeFunc} />\n                    <ToolBarColorPicker setting={'nodeColor'}\n                        changeFunc={changeFunc} settings={toolSettings} />\n                </div>\n            </div>,\n            <div className = 'toolbar-sect' key = 'edgeProps'>\n                <div className = 'section-label'> Edge Properties </div>\n                <div className = 'toolbar-sect-content'>\n                    <ToolBarSlider name={'weight'} settings={toolSettings} min={-100} max={100} setting={'weight'} changeFunc={changeFunc} />\n                    <ToolBarColorPicker setting={'edgeColor'}\n                        changeFunc={changeFunc} settings={toolSettings} />\n                </div>\n            </div>\n        ]\n    }\n}\n\nexport class ToolBarSlider extends React.Component {\n    constructor(props){\n        super(props)\n        this.inputRef = React.createRef()\n        this.valueChange = this.valueChange.bind(this)\n    }\n    valueChange(e) {\n        let rawStr = this.inputRef.current.value\n        let num = parseInt(this.inputRef.current.value)\n        if (rawStr.length > 0) {\n            if (isNaN(num)) {\n                this.inputRef.current.value = this.props.min\n            } else {\n                let paddedNum = Math.min(Math.max(this.props.min, num), this.props.max)\n                this.props.changeFunc(this.props.setting, paddedNum)\n            }\n        }\n    }\n    render() {\n        return (\n            <div className = 'toolbar-slider'>\n                <span>{this.props.name}:</span>\n                <input type='number' title = {this.props.min + ' to ' + this.props.max} min={this.props.min} max={this.props.max}\n                    defaultValue={this.props.settings[this.props.setting]}\n                    onInput={this.valueChange}\n                    ref={this.inputRef} />\n            </div>\n        )\n    }\n}\n\nexport function ToolBarToggle(props) {\n    const func = () => {\n        props.changeFunc(props.setting, !props.settings[props.setting])\n    }\n    return (\n        <div className = 'toolbar-toggle'>\n            <label>\n                Bent\n                <input type='checkbox' defaultChecked={props.settings[props.setting]}\n                    onInput={func} />\n            </label>\n        </div>\n    )\n}\n\nexport class ToolBarColorPicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            colors: [\n                '#000000', //black\n                Colors.DARK_VIOLET,\n                Colors.LIGHT_BLUE,\n                Colors.LIGHT_RED,\n                Colors.LIGHT_GREEN,\n            ],\n            selectedInd: 0\n        }\n    }\n\n    changeColor(i) {\n        this.props.changeFunc(this.props.setting, this.state.colors[i])\n        this.setState({selectedInd: i})\n    }\n\n    render() {\n        return (\n            <div>\n                <div className = 'color-preview-list'>\n                    <div> color: </div>\n                    {this.state.colors.map((item, index) => (\n                        <div key = {index}\n                            className = 'color-preview-elt'\n                            style={{\n                                backgroundColor: item,\n                                border: index === this.state.selectedInd ? '2px solid white' : '1px solid var(--celadon-blue)'\n                            }}\n                            onClick={() => {this.changeColor(index)}} />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n","export var DARK_GREY = '#333333'\nexport var LIGHT_GREY = '#555555'\nexport var LIGHTER_GREY = '#777777'\nexport var PURPLE = '#4F3B7E'\nexport var DARK_VIOLET = '#927fbf'\nexport var LIGHT_VIOLET = '#c4bbf0'\nexport var DARK_BLUE = '#71879a'\nexport var LIGHT_BLUE = '#b1c5d4'\nexport var BRICK_RED = '#c33c54'\nexport var DEEP_CHESTNUT = '#bf4342'\nexport var LIGHT_RED = '#ff6961'\nexport var DEEP_RED_1 = '#562e2e'\nexport var DEEP_RED_2 = '#762e2e'\nexport var DEEP_RED_3 = '#962e2e'\nexport var INDIGO_BLUE = '#254e70'\nexport var CELADON_BLUE = '#37718e'\nexport var SKY_BLUE = '#8ee3ef'\nexport var CELESTE = '#aef3e7'\nexport var LIGHT_GREEN = '#bde7bd'\nexport var HIGHLIGHT = 'rgb(200, 200, 200)'\n","export default function Action(priv, item = null) {\n    this.privateString = priv\n    this.publicString = makePublicString(priv, item)\n    this.item = item\n}\n\nfunction makePublicString(priv, item) {\n    if (item === null) {\n        return priv\n    }\n    switch (priv) {\n        case 'add node':\n            return item.label\n        case 'add edge':\n            return item.u.label + ' ' + item.v.label\n        case 'delete node':\n            return 'del ' + item.label\n        case 'delete edge':\n            return 'del ' + item.u.label + ' ' + item.v.label\n        case 'color node':\n            return 'color ' + item.node.label + ' ' + item.colorLetter\n        case 'color edge':\n            return 'color ' + item.edge.u.label + ' ' + item.edge.v.label + ' ' + item.colorLetter\n        case 'dijkstra':\n            return 'dijkstra ' + item.s + ' ' + item.e\n        case 'belford':\n            return 'belford ' + item.s + ' ' + item.e\n        case 'eulerian mark':\n            return item.edge.u.label + ' to ' + item.edge.v.label\n        case 'bfs':\n            return 'bfs ' + item.label\n        case 'minst':\n            return 'minst ' + item.label\n        case 'maxst':\n            return 'maxst ' + item.label\n        default:\n            return priv\n    }\n}\n","/* eslint-disable */\nexport function edgeClicked(mx, my, edge, dims, tol = 20) {\n    const fn = edge.u\n    const tn = edge.v\n    const scaledFn = toScale(fn, dims)\n    const scaledTn = toScale(tn, dims)\n    const frad = fn.radius\n    const trad = tn.radius\n    const angle = angleBetween(scaledFn, scaledTn)\n    const perp = angle + (Math.PI / 2)\n    const padf = add(scaledFn, baseVectors(frad, angle))\n    const padt = subtract(scaledTn, baseVectors(trad, angle))\n\n    if (edge.bent) {\n        const mid = scale(add(tn, fn), 0.5)\n        const uvDist = dist(scaledTn, scaledFn)\n        const bez = add(mid, toMinmap(baseVectors(Math.min(40, 200 * (100 / uvDist)), perp), dims))\n        let fakeBezNode = {x: bez.x, y: bez.y, radius: 0}\n        let ub = {\n            u: fn,\n            v: fakeBezNode,\n            bent: false\n        }\n        let vb = {\n            u: fakeBezNode,\n            v: tn,\n            bent: false\n        }\n        return edgeClicked(mx, my, ub, dims) || edgeClicked(mx, my, vb, dims)\n    }\n\n    let offset = baseVectors(tol, perp)\n    let ur = add(padf, offset)\n    let ul = subtract(padf, offset)\n    let ll = subtract(padt, offset)\n    let lenY = dist(ur, ul)\n    let lenX = dist(ll, ul)\n    let newXVec = baseVectors(lenX, angle)\n    let newYVec = baseVectors(lenY, perp)\n\n    let lmp = subtract({x: mx, y: my}, ul)\n\n    let projXLen = dot(lmp, newXVec) / len(newXVec)\n    let projYLen = dot(lmp, newYVec) / len(newYVec)\n    let projectsOntoNewX = projXLen * lenX >= 0 && Math.abs(projXLen) <= lenX\n    let projectsOntoNewY = projYLen * lenY >= 0 && Math.abs(projYLen) <= lenY\n\n    return projectsOntoNewX && projectsOntoNewY\n\n}\n\nexport function dist(v1, v2) {\n    const dx = v2.x - v1.x\n    const dy = v2.y - v1.y\n    return Math.sqrt((dx * dx) + (dy * dy))\n}\n\nexport function angleBetween(v1, v2) {\n    const dx = v2.x - v1.x\n    const dy = v2.y - v1.y\n    return Math.atan2(dy, dx)\n}\n\nexport function add(v1, v2) {\n    return {x: v2.x + v1.x, y: v2.y + v1.y}\n}\n\nexport function subtract(v1, v2) {\n    return {x: v1.x - v2.x, y: v1.y - v2.y}\n}\n\nexport function dot(v1, v2) {\n    return (v1.x * v2.x) + (v1.y * v2.y)\n}\n\nexport function len(v) {\n    return dist(v, {x: 0, y: 0})\n}\n\nexport function scale(v, s) {\n    return {x: v.x * s, y: v.y * s}\n}\n\nexport function toScale(v, {w, h}) {\n    return {x: v.x * w, y: v.y * h}\n}\nexport function toMinmap(v, {w, h}) {\n    return {x: v.x / w, y: v.y / h}\n}\n\nexport function normalize(v) {\n    return scale(v, 1 / len(v))\n}\n\nexport function baseVectors(len, ang) {\n    return {x: len * Math.cos(ang), y: len * Math.sin(ang)}\n}\n","export default function MinHeap() {\n    this.A = []\n    this.parent = i => Math.floor(i / 2)\n    this.left = i => 2 * i\n    this.right = i => 2 * i + 1\n\n    this.insert = (elt, key = 9999) => {\n        this.A.push({elt, key: 9999}) //make sure 9999 can not be exceeded\n        this.decreaseKey(this.A.length - 1, key)\n    }\n\n    this.decreaseKey = (i, key) => {\n        const A = this.A\n        if (A[i].key < key) {\n            return\n        }\n\n        A[i].key = key\n        let parent\n        while (i > 0 && A[this.parent(i)].key > A[i].key) {\n            parent = this.parent(i)\n            this.exchange(parent, i)\n            i = parent\n        }\n    }\n\n    this.extractMin = () => {\n        const A = this.A\n        if (A.length === 0) {\n            return\n        }\n        let min = A.shift()\n        if (A.length > 0) {\n            A.unshift(A.pop())\n            this.minHeapify(0)\n        }\n        return min.elt\n\n    }\n\n    this.minHeapify = (i) => {\n        const A = this.A\n        let min = i\n        let l = this.left(i)\n        let r = this.right(i)\n        if (l <= A.length - 1 && A[l].key < A[i].key) {\n            min = l\n        }\n        if (r <= A.length - 1 && A[r].key < A[min].key) {\n            min = r\n        }\n        if (i !== min) {\n            this.exchange(min, i)\n            this.minHeapify(min)\n        }\n\n    }\n\n    this.indexOf = (delt) => {\n        for (let i = 0; i < this.A.length; i++) {\n            if (this.A[i].elt === delt) {\n                return i\n            }\n        }\n        return -1\n    }\n\n    this.getKey = (i) => { return this.A[i].key }\n\n    this.exchange = (i, i2) => {\n        const A = this.A\n        let temp = A[i]\n        A[i] = A[i2]\n        A[i2] = temp\n    }\n\n    this.isEmpty = () => this.A.length === 0\n\n}\n","/* eslint-disable */\nimport Action from '../data-structures/Action.js'\nimport MinHeap from '../data-structures/heaps/MinHeap.js'\n\nexport function clear(graph) {\n\n    let actions = [new Action('clear')]\n    let nodes = graph.getNodeVisuals()\n    nodes.forEach(node => {\n        actions.push(deleteNode(graph, node.label))\n    })\n    return actions\n}\n\nexport function deleteNode(graph, nodeLabel) {\n    if (!graph.hasNode(nodeLabel)) {\n        throw 'Node does not exist.'\n    }\n\n    let actions = []\n    graph.getAllEdgesIncidentOn(nodeLabel).forEach(([u, v]) => {\n        actions.push(new Action('delete edge', graph.removeEdge(u, v)))\n    })\n    actions.push(new Action('delete node', graph.removeNode(nodeLabel)))\n    return actions\n}\n\nexport function BFS(graph, root, parentOf = {}) {\n\n    if (root === undefined) {\n        throw 'source node is undefined.'\n    }\n    if (root === null) {\n        root = Object.keys(graph.nodes)[0]\n    }\n\n    let queue = []\n    let actions = [new Action('bfs', graph.nodes[root])]\n\n    const raw = graph.getRawGraph()\n\n    queue.unshift(root)\n    parentOf[root] = root\n\n    while (queue.length > 0) {\n\n        let parent = queue.pop()\n\n        raw.getAdjacencyList(parent).forEach(child => {\n            if (parentOf[child] != null) {\n                let removedEdge = graph.removeEdge(parent, child)\n                actions.push(new Action('delete edge', removedEdge))\n            } else {\n                parentOf[child] = parent\n                queue.unshift(child)\n            }\n            raw.removeEdge(parent, child)\n        })\n    }\n    return actions\n}\n\nexport function completelyConnected(graph, style, nodes) {\n\n    if (nodes === null) {\n        nodes = Object.keys(graph.nodes)\n    }\n\n    nodes.forEach(n => {\n        if (!graph.hasNode(n)) {\n            throw 'a node specificed is not in the graph.'\n        }\n    })\n\n    let actions = [new Action('cc')]\n\n    nodes.forEach(fNode => {\n        nodes.forEach(tNode => {\n            if (fNode !== tNode && !graph.hasEdge(fNode, tNode)) {\n                actions.push(new Action('add edge', graph.addEdge(tNode, fNode, style)))\n                if (graph.directed) {\n                    actions.push(new Action('add edge', graph.addEdge(fNode, tNode, style)))\n                }\n            }\n        })\n    })\n    return actions\n}\n\nexport function transpose(graph, style) {\n\n    if (!graph.directed) {\n        throw 'cannot make transpose of undirected graph.'\n    }\n\n    let transposeEdges = []\n    let nodes, u, v, weight\n    let actions = [new Action('trans')]\n    graph.getEdgeVisuals().forEach(edge => {\n        u = edge.v.label\n        v = edge.u.label\n        weight = graph.getWeight(v, u)\n        actions.push(new Action('delete edge', edge))\n        transposeEdges.push([u, v, weight])\n        graph.removeEdge(edge)\n    })\n    transposeEdges.forEach(([a, b, w]) => {\n        actions.push(new Action('add edge', graph.addEdge(a, b, style, w)))\n    })\n    return actions\n}\n\nexport function complement(graph, style) {\n\n    if (graph.directed) {\n        throw 'cannot create complement for directed graph.'\n    }\n\n    let actions = [new Action('comp')]\n    const raw = graph.getRawGraph()\n    const rawNodes = raw.getNodes()\n    graph.getEdgeVisuals().forEach(edge => {\n        actions.push(new Action('delete edge', graph.removeEdge(edge)))\n    })\n\n    let u, v\n    for (let i = 0; i < rawNodes.length; i++) {\n        for (let j = i + 1; j < rawNodes.length; j++) {\n            u = rawNodes[i]\n            v = rawNodes[j]\n            if (!raw.hasEdge(u, v)) {\n                actions.push(new Action('add edge', graph.addEdge(u, v, style)))\n            }\n        }\n    }\n    return actions\n}\n\nexport function kosaraju(graph, style) {\n\n    if (!graph.directed) {\n        throw 'cannot make strongly connected components for undirected graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    let transpose = raw.getTranspose()\n\n    let f = exhaustiveDFS(raw).finished\n\n    let nodes = Object.keys(f).map((key) => [key, f[key]]).sort((first, second) => second[1] - first[1]).map(keyValPair => keyValPair[0])\n\n    let outputDFS = exhaustiveDFS(transpose, nodes)\n\n    let actions = [new Action('kosaraju'), clear(graph)]\n    let sccs = Object.keys(outputDFS.trees)\n    sccs.forEach(scc => {\n        actions.push(new Action('add node', graph.addNode(scc, style)))\n    })\n    sccs.forEach(scc1 => {\n        sccs.forEach(scc2 => {\n            if (scc1 !== scc2) {\n                let nodes1 = outputDFS.trees[scc1]\n                let nodes2 = outputDFS.trees[scc2]\n                for (let i = 0; i < nodes1.length; i++) {\n                    let con = raw.getAdjacencyList(nodes1[i])\n                    for (let j = 0; j < con.length; j++) {\n                        if (nodes2.indexOf(con[j]) !== -1) {\n                            let sccEdge = graph.addEdge(scc1, scc2, style)\n                            actions.push(new Action('add edge', sccEdge))\n                            i = nodes1.length\n                            j = con.length\n                        }\n                    }\n                }\n            }\n        })\n    })\n    return actions\n}\n\nexport function exhaustiveDFS(raw, nodes = Object.keys(raw.al)) {\n\n    let trees = {}\n    const colorOf = {}\n    const d = {}\n    const f = {}\n    let time = 0\n\n    nodes.forEach(node => {colorOf[node] = 0}) // 0: white, 1: grey, 2: black\n    nodes.forEach(node => {\n        if (colorOf[node] === 0) {\n            let outputDFS = DFS(raw, node, colorOf, d, f, time, [], \"\")\n            time = outputDFS.time\n            trees[outputDFS.treeName.substring(0, outputDFS.treeName.length - 1)] = outputDFS.tree\n        }\n    })\n\n    return {\n        trees: trees,\n        finished: f\n    }\n}\n\nexport function DFS(raw, root, colorOf, d, f, time, tree, treeName) {\n\n    time = time + 1\n    d[root] = time\n\n    colorOf[root] = 1\n    tree.push(root)\n    treeName += root.toString() + '+'\n\n    const children = raw.getAdjacencyList(root)\n\n    children.forEach((child, i) => {\n        if (colorOf[child] === 0){\n            let outputDFS = DFS(raw, child, colorOf, d, f, time, tree, treeName)\n            time = outputDFS.time\n            treeName = outputDFS.treeName\n        }\n    })\n    colorOf[root] = 2\n    time = time + 1\n    f[root] = time\n\n    return {\n        time: time,\n        tree: tree,\n        treeName: treeName\n    }\n}\n\nexport function minst(graph, s) {\n\n    if (s === undefined) {\n        s = Object.keys(graph.nodes)[0]\n    }\n\n    let actions = [new Action('minst', graph.nodes[s])]\n    return prim(graph.getRawGraph(), graph, s, actions)\n\n}\n\nexport function maxst(graph, s) {\n\n    if (s === undefined) {\n        s = Object.keys(graph.nodes)[0]\n    }\n\n    let raw = graph.getRawGraph()\n    let actions = [new Action('maxst', graph.nodes[s])]\n    for (let edge in raw.w) {\n        raw.w[edge] = (1 / raw.w[edge])\n    }\n    return prim(raw, graph, s, actions)\n}\n\nexport function prim(raw, graph, s, actions) {\n\n    if (!graph.weighted) {\n        throw 'cannot make a spanning tree for an unweighted graph.'\n    }\n    if (graph.directed) {\n        throw 'cannot make a spanning tree for a directed graph.'\n    }\n\n    let queue = []\n    let tree = []\n    let parentOf = {}\n\n    queue.unshift(s)\n    parentOf[s] = s\n\n    let temp = raw.clone()\n\n    while (queue.length > 0) {\n        let parent = queue.pop()\n        tree.push(parent)\n        let children = temp.getAdjacencyList(parent)\n        children.forEach(child => {\n            if (!parentOf.hasOwnProperty(child)) {\n                parentOf[child] = parent\n                queue.unshift(child)\n            }\n            temp.removeEdge(parent, child)\n        })\n    }\n\n    let parent = {}\n    let pq = new MinHeap()\n\n    tree.forEach(node => {\n        pq.insert(node)\n        parent[node] = null\n    })\n\n    pq.decreaseKey(pq.indexOf(s), 0)\n\n    while (!pq.isEmpty()) {\n\n        let u = pq.extractMin()\n        let adjU = raw.getAdjacencyList(u)\n\n        if (adjU.length === 0) {\n            break\n        }\n\n        adjU.forEach(v => {\n            let w = raw.getWeight(u, v)\n            let vind = pq.indexOf(v)\n            if (vind !== -1 && w < pq.getKey(vind)) {\n                pq.decreaseKey(vind, w)\n                parent[v] = u\n            }\n        })\n    }\n\n    let remainingEdgeVisualKeys = []\n    Object.entries(parent).forEach(([u2, v2]) => {\n        if (v2 !== null) {\n            remainingEdgeVisualKeys.push(u2 + ' ' + v2)\n            remainingEdgeVisualKeys.push(v2 + ' ' + u2)\n        }\n    })\n\n    tree.forEach(u => {\n        raw.getAdjacencyList(u).forEach(v => {\n            if (graph.hasEdge(u, v) && remainingEdgeVisualKeys.indexOf(u + ' ' + v) === -1) {\n                actions.push(new Action('delete edge', graph.removeEdge(u, v)))\n            }\n        })\n    })\n\n    return actions\n}\n","import * as Colors from '../assets/Colors.js'\nimport * as Gmy from './Geometry.js'\n\nexport function fillCircle(ctx, canvas, cx, cy, rad, color, border = false) {\n    let {w, h} = getCanvasDimensions(canvas)\n    ctx.beginPath()\n    ctx.arc(cx * w, cy * h, rad, 0, 2 * Math.PI, false)\n    ctx.fillStyle = color\n    ctx.fill()\n    if (border) {\n        ctx.lineWidth = 1\n        ctx.strokeStyle = 'black'\n        ctx.stroke()\n    }\n}\n\nexport function fillText(ctx, canvas, msg, cx, cy, color, size = 12) {\n    let {w, h} = getCanvasDimensions(canvas)\n    ctx.fillStyle = color\n    ctx.font = size.toString() + 'px Roboto'\n    ctx.fillText(msg, cx * w, cy * h)\n}\n\nexport function drawEdge(ctx, canvas, edge, color, directed, bs, weighted, selected) {\n    let dims = getCanvasDimensions(canvas)\n    const bendstyle = bs ? 1 : 0\n    const fn = edge.u\n    const tn = edge.v\n    const scaledFn = Gmy.toScale(fn, dims)\n    const scaledTn = Gmy.toScale(tn, dims)\n    const frad = fn.radius\n    const trad = tn.radius\n    const dist = Gmy.dist(scaledFn, scaledTn)\n    const angle = Gmy.angleBetween(scaledFn, scaledTn)\n    const perp = angle + (Math.PI / 2)\n    const mid = Gmy.scale(Gmy.add(scaledTn, scaledFn), 0.5)\n    const bez = Gmy.add(mid, Gmy.baseVectors(Math.min(40, 200 * (100 / dist)), perp))\n    const offsetf = Gmy.baseVectors(frad, angle)\n    const offsett = Gmy.baseVectors(trad, angle)\n    const otherf = Gmy.baseVectors(0.5 * frad * bendstyle, perp)\n    const othert = Gmy.baseVectors(0.5 * trad * bendstyle, perp)\n    const padf = Gmy.add(Gmy.add(scaledFn, offsetf), otherf)\n    const padt = Gmy.add(Gmy.subtract(scaledTn, offsett), othert)\n\n    ctx.lineWidth = selected ? 2 : 1\n    ctx.beginPath()\n\n    // text stuff\n    let weightPos = Gmy.toMinmap((bs ? bez : Gmy.add(mid, Gmy.baseVectors(10, perp))), dims)\n    if (weighted) {\n        fillText(ctx, canvas, edge.weight, weightPos.x, weightPos.y, 'black')\n    }\n    if (edge.eulerianMarker !== null) {\n        weightPos = Gmy.toMinmap(Gmy.add(Gmy.toScale(weightPos, dims), Gmy.baseVectors(-20, perp)), dims)\n        fillText(ctx, canvas, edge.eulerianMarker, weightPos.x, weightPos.y, Colors.LIGHT_RED)\n    }\n\n    ctx.strokeStyle = color\n    ctx.fillStyle = color\n    ctx.moveTo(padf.x , padf.y)\n\n    if (bendstyle === 0) {\n        ctx.lineTo(padt.x, padt.y)\n    } else {\n        ctx.quadraticCurveTo(bez.x, bez.y, padt.x, padt.y)\n    }\n\n    ctx.stroke()\n    ctx.closePath()\n\n    if (directed) {\n        ctx.beginPath()\n        let arrowAng = bendstyle === 0 ? angle - (bendstyle * Math.PI / 7.5) : Gmy.angleBetween(bez, padt)\n        arrowHead(ctx, padt.x, padt.y, arrowAng)\n        ctx.closePath()\n        ctx.fill()\n    }\n}\n\nfunction arrowHead(context, tox, toy, angle) {\n    const headlen = 8\n    context.moveTo(tox, toy)\n    context.lineTo(tox - headlen * Math.cos(angle - Math.PI / 6), toy - headlen * Math.sin(angle - Math.PI / 6))\n    context.lineTo(tox - headlen * Math.cos(angle + Math.PI / 6), toy - headlen * Math.sin(angle + Math.PI / 6))\n}\n\nfunction getCanvasDimensions(canvas) {\n    return  {w: canvas.width, h: canvas.height}\n}\n\nexport function clearAndPrepare(ctx) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n}\n","/* eslint-disable */\nimport React from 'react'\nimport Action from '../data-structures/Action.js'\nimport * as Gmy from '../functions/Geometry.js'\nimport * as Transformations from '../functions/Transformations.js'\nimport * as Renderer from '../functions/Rendering.js'\nimport * as Colors from '../assets/Colors.js'\n\nexport class GraphRender extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedNode: null,\n            selectedEdges: [],\n            mouseDown: false,\n        }\n        this.mouseUp = this.mouseUp.bind(this)\n        this.mouseDown = this.mouseDown.bind(this)\n        this.mouseMove = this.mouseMove.bind(this)\n        this.renderGraph = this.renderGraph.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.canvasRef = React.createRef()\n    }\n\n    getPngURI() {\n        return this.canvasRef.current.toDataURL()\n    }\n\n    nodeClicked(x, y, dims) {\n        const nodes = this.props.graph.getNodeVisuals()\n        let node\n        for (let i = 0; i < nodes.length; i++) {\n            node = nodes[i]\n            if (Gmy.dist({x, y}, Gmy.toScale(node, dims)) <= node.radius) {\n                return node\n            }\n        }\n        return null\n    }\n\n    edgeClicked(x, y, dims) {\n        const edges = this.props.graph.getEdgeVisuals()\n        for (let i = 0; i < edges.length; i++) {\n            if (Gmy.edgeClicked(x, y, edges[i], dims)) {\n                return edges[i]\n            }\n        }\n        return null\n    }\n\n    manageEdgeSelection(edge) {\n        let se = this.state.selectedEdges\n        if (se.indexOf(edge) === -1) {\n            se.push(edge)\n        } else {\n            se.splice(se.indexOf(edge), 1)\n        }\n    }\n\n    mouseDown(e) {\n\n        const dims = this.getCanvasDimensions()\n        const {x, y} = this.getMouseInput(e)\n        const mm = Gmy.toMinmap({x, y}, dims)\n        const graph = this.props.graph\n        const style = this.props.style\n        const clickedNode = this.nodeClicked(x, y, dims)\n        const clickedEdge = this.edgeClicked(x, y, dims)\n        const nodeClicked = clickedNode !== null\n        const nodeSelected = this.state.selectedNode !== null\n        const edgeClicked = clickedEdge !== null\n\n        if (!nodeSelected && nodeClicked) {\n\n            this.setState({selectedNode: clickedNode})\n\n        } else if (edgeClicked) {\n\n            this.manageEdgeSelection(clickedEdge)\n\n        } else if (!nodeSelected && !nodeClicked && graph.nodeCount < 30) {\n\n            let label = graph.getNextNodeLabel()\n            let nodeToAdd = graph.addNode(label, style, mm.x, mm.y)\n            this.props.handleActions([new Action('add node', nodeToAdd)], [label])\n\n        } else if (nodeSelected && !nodeClicked) {\n\n            this.state.selectedNode.x = mm.x\n            this.state.selectedNode.y = mm.y\n            this.setState({selectedNode: null})\n\n        } else if (nodeSelected && nodeClicked) {\n\n            let u = this.state.selectedNode.label\n            let v = clickedNode.label\n\n            if (!graph.hasEdge(u, v) && u !== v) {\n\n                let edge = graph.addEdge(this.state.selectedNode.label, clickedNode.label, style)\n                this.props.handleActions([new Action('add edge', edge)], [edge.u.label + ' ' + edge.v.label])\n                this.setState({selectedNode: null})\n\n            }\n\n        }\n        this.setState({mouseDown: true})\n    }\n\n    mouseUp(e) {\n        if (this.state.movingNode) {\n            this.setState({selectedNode: null, movingNode: false})\n        }\n        this.setState({mouseDown: false})\n    }\n\n    mouseMove(e) {\n        if (this.state.selectedNode !== null && this.state.mouseDown) {\n            const {x, y} = this.getMouseInput(e)\n            const {w, h} = this.getCanvasDimensions()\n            this.state.selectedNode.x = x / w\n            this.state.selectedNode.y = y / h\n            this.setState({movingNode: true})\n        }\n    }\n\n    handleKeyPress(e) {\n        switch (e.keyCode) {\n            case 8:\n                //e.preventDefault()\n                let actions = []\n                let cmds = []\n                if (this.state.selectedNode != null) {\n                    actions.push(Transformations.deleteNode(this.props.graph, this.state.selectedNode.label))\n                    cmds.push('del ' + this.state.selectedNode.label)\n                    this.setState({selectedNode: null})\n                }\n                if (this.state.selectedEdges != []) {\n                    this.state.selectedEdges.forEach(edge => {\n                        if (this.props.graph.hasEdge(edge)) {\n                            actions.push(new Action('delete edge', this.props.graph.removeEdge(edge)))\n                            cmds.push('del ' + edge.u.label + ' ' + edge.v.label)\n                        }\n                    })\n                    this.setState({selectedEdges: []})\n                }\n                this.props.handleActions(actions, cmds)\n            break\n            case 27:\n                this.setState({\n                    selectedNode: null,\n                    selectedEdges: []\n                })\n            break\n        }\n    }\n\n    getMouseInput(e) {\n        const canvas = this.canvasRef.current\n        const rect = canvas.getBoundingClientRect()\n        const x = (e.clientX - rect.left) // / canvas.clientWidth ADD THIS SHIT LATER!\n        const y = (e.clientY - rect.top) // / canvas.clientHeight\n        return {x, y}\n    }\n\n    render() {\n        return (\n            <canvas id = 'canvas' className = 'section spaced' ref={this.canvasRef}\n                onMouseUp={this.mouseUp}\n                onMouseDown={this.mouseDown}\n                onMouseMove={this.mouseMove}/>\n        )\n    }\n\n    componentDidUpdate() {\n        this.renderGraph()\n    }\n\n    componentDidMount(){\n        document.addEventListener('keydown', this.handleKeyPress, false)\n        window.addEventListener('resize', this.renderGraph)\n        this.fixCanvasDimensions()\n    }\n    componentWillUnmount(){\n        document.removeEventListener('keydown', this.handleKeyPress, false)\n        window.removeEventListener('resize', this.renderGraph)\n    }\n\n    getCanvasDimensions() {\n        return {w: this.canvasRef.current.width, h: this.canvasRef.current.height}\n    }\n\n    fixCanvasDimensions() {\n        const canvas = this.canvasRef.current\n        canvas.width = canvas.clientWidth\n        canvas.height = canvas.clientHeight\n    }\n\n    renderGraph() {\n\n        this.fixCanvasDimensions()\n\n        const canvas = this.canvasRef.current\n        const ctx = canvas.getContext(\"2d\")\n        const graph = this.props.graph\n        const style = this.props.style\n        const nodes = graph.getNodeVisuals()\n        const edges = graph.getEdgeVisuals()\n\n        Renderer.clearAndPrepare(ctx)\n\n        const selectedNode = this.state.selectedNode\n        if (selectedNode !== null && !graph.hasNode(selectedNode)) {\n            this.setState({selectedNode: null})\n        }\n\n        const selectedEdges = this.state.selectedEdges\n        edges.forEach(edge => {\n            Renderer.drawEdge(ctx, canvas, edge, edge.color, graph.directed, edge.bent, graph.weighted, selectedEdges.indexOf(edge) !== -1)\n        })\n\n        nodes.forEach(node => {\n            if (node === selectedNode) {\n                Renderer.fillCircle(ctx, canvas, node.x, node.y,\n                    1.2 * node.radius, Colors.HIGHLIGHT, false)\n            }\n            Renderer.fillCircle(ctx, canvas, node.x, node.y, node.radius, node.color, true)\n            Renderer.fillText(ctx, canvas, node.label, node.x, node.y, 'white', node.radius < 10 ? 10 : 12)\n        })\n    }\n}\n","/* eslint-disable */\n\nexport function kosaraju(raw) {\n\n    let f = exhaustiveDFS(raw).finished\n    let transpose = raw.getTranspose()\n    let nodes = Object.keys(f).map((key) => [key, f[key]]).sort((first, second) => second[1] - first[1]).map(keyValPair => keyValPair[0])\n\n    let outputDFS = exhaustiveDFS(transpose, nodes)\n    return {\n        sccs: outputDFS.trees,\n        dag: outputDFS.dag\n    }\n}\n\nexport function exhaustiveDFS(raw, nodes = raw.getNodes()) {\n\n    let dag = true\n    let trees = 0\n\n    const colorOf = {}\n    const d = {}\n    const f = {}\n\n    let time = 0\n\n    nodes.forEach(node => {colorOf[node] = 0}) // 0: white, 1: grey, 2: black\n    nodes.forEach(node => {\n        if (colorOf[node] === 0) {\n            let outputDFS = DFS(raw, node, colorOf, d, f, time)\n            time = outputDFS.time\n            dag = dag && !outputDFS.cycle\n            trees++\n        }\n    })\n\n    return {\n        dag: dag.toString(),\n        trees: trees,\n        finished: f,\n        discovered: d\n    }\n}\n\nexport function DFS(raw, root, colorOf, d, f, time) {\n\n    let cycle = false\n    time = time + 1\n    d[root] = time\n    colorOf[root] = 1\n\n    raw.getAdjacencyList(root).forEach((child, i) => {\n        if (colorOf[child] === 0){\n            let outputDFS = DFS(raw, child, colorOf, d, f, time)\n            time = outputDFS.time\n            cycle = cycle || outputDFS.cycle\n        } else if (colorOf[child] === 1) {\n            cycle = true\n        }\n    })\n\n    colorOf[root] = 2\n    time = time + 1\n    f[root] = time\n\n    return {\n        time: time,\n        cycle: cycle\n    }\n}\n\nfunction BFS(raw, root, parentOf = {}) {\n\n    let cycle = false\n    let bipartite = true\n\n    let depthLevel = {}\n    let queue = []\n    let nodeCount = 0\n    queue.unshift(root)\n\n    parentOf[root] = root\n    depthLevel[root] = 0\n\n    while (queue.length > 0) {\n\n        let parent = queue.pop()\n        nodeCount++\n\n        raw.getAdjacencyList(parent).forEach(child => {\n            if (parentOf[child] != null) {\n                if (parentOf[parent] !== child) {\n                    cycle = true\n                    bipartite = bipartite && ((depthLevel[parent] - depthLevel[child]) % 2 !== 0)\n                }\n            } else {\n                parentOf[child] = parent\n                depthLevel[child] = depthLevel[parent] + 1\n                queue.unshift(child)\n            }\n        })\n    }\n\n    return {\n        cycle: cycle,\n        bipartite: bipartite,\n        nodeCount: nodeCount\n    }\n}\n\nexport function exhaustiveBFS(raw) {\n\n    let ccs = 0\n    let nonSingletons = 0\n    let cycle = false\n    let bipartite = true\n    let parentOf = {}\n    let nodes = raw.getNodes()\n    nodes.forEach(node => {parentOf[node] = null})\n\n    while (nodes.length > 0) {\n        let root = nodes.pop()\n        if (parentOf[root] == null) {\n            ccs++\n            let outputBFS = BFS(raw, root, parentOf)\n            cycle = cycle || outputBFS.cycle\n            bipartite = bipartite && outputBFS.bipartite\n            if (outputBFS.nodeCount > 1) {\n                nonSingletons++\n            }\n        }\n    }\n    return {\n        ccs: ccs,\n        nonSingletons: nonSingletons,\n        acyclic: (!cycle).toString(),\n        tree: (ccs === 1 && !cycle).toString(),\n        forest: (ccs >= 1 && !cycle).toString(),\n        bipartite: bipartite.toString()\n    }\n}\n\nexport function eulerianAndHamiltonian(ccs, nonSingletons, raw) {\n\n    let nodes = raw.getNodes()\n\n    let maxDegree = 0\n    let minDegree = raw.getNodes().length\n    let eulerian = true && nonSingletons === 1\n\n    let hamiltonian = (ccs > 1) ? 0 : 2 // 0: false, 1: possible, 2: true\n    const hamDeg = nodes.length * 0.5\n\n    nodes.forEach(node => {\n        let childCount = raw.getAdjacencyList(node).length\n        if (childCount % 2 === 1) {\n            eulerian = false\n        }\n        if (hamiltonian === 2 && childCount < hamDeg) {\n            hamiltonian = 1\n        }\n        if (childCount > maxDegree) {\n            maxDegree = childCount\n        }\n        if (childCount < minDegree){\n            minDegree = childCount\n        }\n    })\n\n    if (hamiltonian === 2 && nodes.length < 3) {\n        hamiltonian = 1\n    }\n\n    let hamStr\n    switch (hamiltonian) {\n        case 0:\n            hamStr = 'false'\n        break\n        case 1:\n            hamStr = 'possible'\n        break\n        default:\n            hamStr = 'true'\n        break\n    }\n\n    return {\n        eulerian: eulerian.toString(),\n        minDegree: minDegree,\n        maxDegree: maxDegree,\n        hamiltonian: hamStr\n    }\n}\n","import React from 'react'\nimport './css/PropList.css'\nimport { exhaustiveBFS, kosaraju, eulerianAndHamiltonian } from '../functions/Graphing.js'\nimport * as Colors from '../assets/Colors.js'\n\nexport class GraphPropsList extends React.Component {\n\n    render(){\n\n        let underlyingGraph = this.props.graph.getUnderlyingGraph()\n        let outputBFS = exhaustiveBFS(underlyingGraph)\n        let propsOutput\n\n        if (!this.props.graph.directed) {\n            let outputEul = eulerianAndHamiltonian(outputBFS.ccs, outputBFS.nonSingletons, underlyingGraph)\n            propsOutput = [\n                GraphProp('Min Degree', outputEul.minDegree),\n                GraphProp('Max Degree', outputEul.maxDegree),\n                GraphProp('Tree', outputBFS.tree),\n                GraphProp('Forest', outputBFS.forest),\n                GraphProp('Eulerian', outputEul.eulerian),\n                GraphProp('Hamiltonian', outputEul.hamiltonian)\n            ]\n        } else {\n            let outputKos = kosaraju(this.props.graph)\n            propsOutput = [\n                GraphProp('Polytree', outputBFS.tree),\n                GraphProp('Polyforest', outputBFS.forest),\n                GraphProp('DAG', outputKos.dag),\n                GraphProp('Strongly Connected Components', outputKos.sccs)\n            ]\n        }\n\n        return (\n            <div id = 'props' className = 'section spaced'>\n                <div className = 'section-label'> Graph Properties </div>\n                <div id = 'props-list'>\n                    {GraphProp('Connected Components', outputBFS.ccs)}\n                    {propsOutput}\n                    {GraphProp('Bipartite', outputBFS.bipartite)}\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction GraphProp(string, item) {\n    let style = {}\n    let color = 0 //0 blue, 1 red, 2 violet\n    switch(typeof item) {\n        case 'boolean':\n            if (!item) {\n                color = 1\n            }\n            break\n        case 'number':\n            if (item === 0) {\n                color = 1\n            }\n            break\n        case 'string':\n            if (item === 'possible') {\n                color = 2\n            } else if (item === 'false') {\n                color = 1\n            }\n            break\n        default:\n            break\n    }\n    switch(color) {\n        case 0:\n            style.backgroundColor = Colors.CELESTE\n            style.color = Colors.CELADON_BLUE\n            break\n        case 1:\n            style.backgroundColor = Colors.LIGHT_RED\n            style.color = Colors.DEEP_RED_2\n            break\n        case 2:\n            style.backgroundColor = Colors.LIGHT_VIOLET\n            style.color = Colors.PURPLE\n            break\n        default:\n            break\n    }\n    return <div key={string} style={style}> {string}: {item} </div>\n}\n","import React from 'react'\nimport './css/ToolBar.css'\n\nexport class StateManager extends React.Component {\n    render() {\n        const clear = this.props.clearFunc\n        const undo = this.props.undoFunc\n        const redo = this.props.redoFunc\n        const changeFunc = this.props.changeFunc\n        return (\n            <div className = 'toolbar-sect' id = 'state-manager'>\n                <div className = 'section-label'> State </div>\n                <div className = 'toolbar-sect-content'>\n                    <div>\n                        <button onClick={clear}> reset </button>\n                        <button onClick={undo} disabled={!this.props.canUndo}> undo </button>\n                        <button onClick={redo} disabled={!this.props.canRedo}> redo </button>\n                    </div>\n                    <div>\n                        <input type='checkbox' defaultChecked={true}\n                            onClick={(cb) => {changeFunc('directed', cb.target.checked)}}\n                            disabled={this.props.edgeCount > 0} />\n                        <span>directed</span>\n                    </div>\n                    <div>\n                        <input type='checkbox' onClick={(cb) => {changeFunc('weighted', cb.target.checked)}} />\n                        <span>weighted</span>\n                    </div>\n                    <div>\n                        <input type='checkbox'\n                            onClick={(cb) => {changeFunc('simple', cb.target.checked)}}\n                            defaultChecked={true}\n                            disabled={true}/>\n                        <span>simple</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","/* eslint-disable */\nimport Action from '../data-structures/Action.js'\nimport MinHeap from '../data-structures/heaps/MinHeap.js'\nimport * as Colors from '../assets/Colors.js'\nimport * as Graphing from './Graphing.js'\n\nexport function color(graph, obj, color, isNode = true) {\n    if (isNode && !graph.hasNode(obj)) {\n        throw 'node does not exist.'\n    } else if (!isNode && !graph.hasEdge(obj[0], obj[1])){\n        throw 'edge does not exist.'\n    }\n    let rgbCol\n    switch (color) {\n        case 'v':\n            rgbCol = Colors.DARK_VIOLET\n        break\n        case 'b':\n            rgbCol = Colors.LIGHT_BLUE\n        break\n        case 'r':\n            rgbCol = Colors.LIGHT_RED\n        break\n        case 'g':\n            rgbCol = Colors.LIGHT_GREEN\n        break\n        default:\n            throw 'no such color.'\n    }\n\n    if (isNode) {\n        let prev = graph.nodes[obj].color\n        let curr = rgbCol\n        graph.nodes[obj].color = rgbCol\n        return new Action('color node', {node: graph.nodes[obj], colorLetter: color, prev, curr})\n    } else {\n        let edge = graph.getEdge(obj[0], obj[1])\n        let prev = edge.color\n        edge.color = rgbCol\n        return new Action('color edge', {edge, prev, curr: rgbCol, colorLetter: color})\n    }\n}\n\nexport function dijkstra(graph, s, e) {\n    if (s === undefined || e === undefined || !graph.hasNode(s) || !graph.hasNode(e)) {\n        throw 'source or end node not in graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    let actions = [new Action('dijkstra', {s, e})]\n\n    let dist = {}\n    let parent = {}\n    let pq = new MinHeap()\n\n    raw.getNodes().forEach(node => {\n        pq.insert(node)\n        parent[node] = null\n    })\n    pq.decreaseKey(pq.indexOf(s), 0)\n\n    while (!pq.isEmpty()) {\n\n        let dist = pq.getKey(0)\n        let u = pq.extractMin()\n\n        raw.getAdjacencyList(u).forEach(v => {\n            let w = raw.getWeight(u, v)\n\n            if (w < 0) {\n                throw 'negative edge weight exists.'\n            }\n\n            let vInd = pq.indexOf(v)\n\n            if (vInd !== -1 && pq.getKey(vInd) > dist + w) {\n                pq.decreaseKey(vInd, dist + w)\n                parent[v] = u\n            }\n        })\n    }\n    let current = e\n    let currParent\n    while (current !== null) {\n        currParent = parent[current]\n        if (currParent !== null) {\n            actions.push(color(graph, [currParent, current], 'r', false))\n        }\n        current = currParent\n    }\n    return actions\n}\n\nexport function bellmanFord(graph, s, e) {\n\n    if (!graph.hasNode(s) || !graph.hasNode(e)) {\n        throw 'source or end node not in graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    let nodes = raw.getNodes()\n    let edges = raw.getEdges()\n    let actions = [new Action('belford', {s, e})]\n\n    let dist = {}\n    let parent = {}\n\n    nodes.forEach(node => {\n        dist[node] = 9999\n        parent[node] = null\n    })\n\n    dist[s] = 0\n    for (let i = 1; i < nodes.length; i++) {\n        edges.forEach(([u, v]) => {\n            if (dist[u] + raw.getWeight(u, v) < dist[v]) {\n                dist[v] = dist[u] + raw.getWeight(u, v)\n                parent[v] = u\n            }\n        })\n    }\n\n    edges.forEach(([u, v]) => {\n        if (dist[u] + raw.getWeight(u, v) < dist[v]) {\n            throw 'negative cycle.'\n        }\n    })\n\n    let current = e\n    let currParent\n    while (current !== null) {\n        currParent = parent[current]\n        if (currParent !== null) {\n            actions.push(color(graph, [currParent, current], 'r', false))\n        }\n        current = currParent\n    }\n    return actions\n\n}\n\nexport function colorAll(graph) {\n    let raw = graph.getRawGraph().getUnderlyingGraph()\n    let ncolor = {}\n    let actions = [new Action('colorall')]\n    raw.getNodes().forEach(node => {\n        ncolor[node] = 0\n    })\n    raw.getNodes().forEach(node => {\n        let goodCols = [1, 2, 3, 4]\n        raw.getAdjacencyList(node).forEach(node2 => {\n            if (ncolor[node2] !== 0) {\n                let index = goodCols.indexOf(ncolor[node2])\n                if (index !== -1) {\n                    goodCols.splice(index, 1)\n                }\n\n            }\n        })\n        if (goodCols.length === 0) {\n            throw 'graph is not 4-colorable.'\n        }\n        ncolor[node] = goodCols[0]\n    })\n    Object.entries(ncolor).forEach(([nodeLabel, colorNum]) => {\n        let col\n        switch(colorNum) {\n            case 1: col = 'r'; break\n            case 2: col = 'b'; break\n            case 3: col = 'v'; break\n            case 4: col = 'g'; break\n        }\n        actions.push(color(graph, nodeLabel, col))\n    })\n    return actions\n}\n\nexport function eulerianCircuit(graph) {\n\n    if (graph.directed) {\n        throw 'cannot check on directed graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    let edgeCount = 0\n    let currentNode = null\n    for (let node in raw.al) {\n        let edges = raw.al[node].length\n        if (edges % 2 !== 0) {\n            throw 'no eulerian circuit.'\n        }\n        edgeCount += edges\n        if (edges > 0) {\n            currentNode = node\n        }\n    }\n    edgeCount /= 2\n    let next\n    let circuit = []\n    while (edgeCount > 0 && currentNode !== null) {\n        next = raw.al[currentNode][0]\n        raw.removeEdge(currentNode, next)\n        circuit.push([currentNode, next])\n        currentNode = next\n        edgeCount--\n    }\n\n    let actions = [new Action('eulcirc')]\n    let edge\n    circuit.forEach(([u, v], i) => {\n        edge = graph.getEdge(u, v)\n        actions.push(new Action('eulerian mark', {edge, prev: edge.eulerianMarker, mark: i + 1}))\n        edge.eulerianMarker = i + 1\n    })\n    return actions\n}\n\nexport function eulerianPath(graph) {\n\n    if (graph.directed) {\n        throw 'cannot check on directed graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    let edgeCount = 0\n    let currentNode = null\n    for (let node in raw.al) {\n        let edges = raw.al[node].length\n        if (edges % 2 !== 0 || currentNode === null) {\n            currentNode = node\n        }\n        edgeCount += edges\n    }\n    edgeCount /= 2\n\n    let next\n    let circuit = []\n    while (edgeCount > 0 && currentNode !== null) {\n        if (raw.al[currentNode].length === 0 && edgeCount > 0) {\n            throw 'no eulerian path.'\n        } else if (raw.al[currentNode].length === 1) {\n            next = raw.al[currentNode][0]\n        } else {\n            let rawccs = Graphing.exhaustiveBFS(raw).ccs\n            for (let i = 0; i < raw.al[currentNode].length; i++) {\n                let clone = raw.clone()\n                let other = raw.al[currentNode][i]\n                clone.removeEdge(currentNode, other)\n                next = other\n                let cloneccs = Graphing.exhaustiveBFS(clone).ccs\n                if (cloneccs === rawccs) {\n                    break\n                }\n            }\n        }\n        raw.removeEdge(currentNode, next)\n        circuit.push([currentNode, next])\n        currentNode = next\n        edgeCount--\n    }\n    let actions = [new Action('eulpat')]\n    let edge\n    circuit.forEach(([u, v], i) => {\n        edge = graph.getEdge(u, v)\n        actions.push(new Action('eulerian mark', {edge, prev: edge.eulerianMarker, mark: i + 1}))\n        edge.eulerianMarker = i + 1\n    })\n    return actions\n}\n\n\n// not the greatest implementation. Try and improve this later on.\nexport function stoerWagner(graph) {\n\n    if (graph.directed) {\n        throw 'cannot do Stoer Wagner on directed graph.'\n    }\n\n    let raw = graph.getRawGraph()\n    raw.weighted = true\n    let minCut = 9999\n    let fg1, fg2\n    while (raw.getNodes().length > 1) {\n        let {g1, g2, cutOfThePhase} = stoerWagnerHelp(raw)\n        if (cutOfThePhase < minCut) {\n            fg1 = g1\n            fg2 = g2\n            minCut = cutOfThePhase\n        }\n    }\n    let actions = [new Action('stowag')]\n    let group1 = (fg1.map(gn => gn.split('').filter(l => l !== '(' && l !== ')'))).toString().split(',')\n    let group2 = (fg2.map(gn => gn.split('').filter(l => l !== '(' && l !== ')'))).toString().split(',')\n    group1.forEach(n1 => {\n        group2.forEach(n2 => {\n            if (graph.hasEdge(n1, n2)) {\n                actions.push(color(graph, [n1, n2], 'r', false))\n            }\n        })\n    })\n    return actions\n}\n\nfunction stoerWagnerHelp(raw) {\n    let nodes = raw.getNodes()\n    let curr = nodes[0]\n    let visited = [curr]\n    while (visited.length !== nodes.length - 1) {\n        let adjList = raw.getAdjacencyList(curr)\n        let toAdd\n        let largestConnection = 0\n        adjList.forEach(other => {\n            if (visited.indexOf(other) === -1) {\n                let weightToVisited = 0\n                visited.forEach(vNode => {\n                    if (raw.hasEdge(vNode, other)) {\n                        weightToVisited += raw.getWeight(vNode, other)\n                    }\n                })\n                if (weightToVisited > largestConnection) {\n                    toAdd = other\n                    largestConnection = weightToVisited\n                }\n            }\n        })\n        visited.push(toAdd)\n        curr = toAdd\n    }\n    let t = nodes.filter(node => visited.indexOf(node) === -1)[0]\n    let s = visited[visited.length - 1]\n    let merge = '(' + s + t + ')'\n    raw.addNode(merge)\n    let cutOfThePhase = 0\n    let w\n    raw.getAdjacencyList(t).forEach(node => {\n            w = raw.getWeight(t, node)\n            if (node !== s && !raw.hasEdge(merge, node)) {\n                raw.addEdge(merge, node, w)\n            }\n            cutOfThePhase += w\n    })\n    raw.getAdjacencyList(s).forEach(node => {\n        if (node !== t) {\n            w = raw.getWeight(s, node)\n            if (!raw.hasEdge(merge, node)) {\n                raw.addEdge(merge, node, w)\n            } else {\n                raw.increaseWeight(merge, node, w)\n            }\n        }\n    })\n    raw.completelyRemoveNode(s)\n    raw.completelyRemoveNode(t)\n    return {g1: [t], g2: visited, cutOfThePhase}\n}\n","/* eslint-disable */\nimport React from 'react'\nimport * as Transformations from '../functions/Transformations.js'\nimport * as Visualizations from '../functions/Visualizations.js'\n//import { hamiltionianCycle } from '../data-structures/Hamiltonian.js'\nimport Action from '../data-structures/Action.js'\nimport * as Colors from '../assets/Colors.js'\nimport './css/CommandLineInterface.css'\n\nexport class CLI extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.inputRef = React.createRef()\n        this.bottomRef = React.createRef()\n        this.state = {\n            status: 'None',\n            error: false\n        }\n    }\n\n    handleKeyPress(e) {\n        if (e.keyCode === 13) {\n            this.handleCommand(this.inputRef.current.value)\n            this.inputRef.current.value = ''\n        }\n    }\n\n    handleCommand(line) {\n        const graph = this.props.graph\n        const style = this.props.style\n        const cl = this.props.clState\n        let cmdList\n        if (line.includes(';')) {\n            cmdList = line.split(';').filter(cmd => cmd !== '')\n        } else {\n            cmdList = [line]\n        }\n        let actions = []\n        cmdList.forEach(cmd => {\n\n            let pc = cl.parseCommand(cmd)\n            let u, v, src\n            try {\n                switch (pc[0]) {\n                    case 'delete node':\n                        actions.push(Transformations.deleteNode(graph, pc[1]))\n                    break\n                    case 'add edge':\n                        u = pc[1]\n                        v = pc[2]\n                        let w = pc[3]\n                        if (u === v) {\n                            throw 'no self edges.'\n                        }\n                        if (graph.hasNode(u) && graph.hasNode(v)) {\n                            if (graph.hasEdge(u, v)) {\n                                if (w === undefined) {\n                                    throw 'edge already exists.'\n                                }\n                                graph.setWeight(u, v, w)\n                            }\n                            actions.push(new Action('add edge', graph.addEdge(u, v, style, w)))\n                        } else {\n                            throw 'no such nodes.'\n                        }\n                    break\n                    case 'delete edge':\n                        u = pc[1]\n                        v = pc[2]\n                        if (graph.hasEdge(u, v)) {\n                            actions.push(new Action('delete edge', graph.removeEdge(u, v)))\n                        } else {\n                            throw 'edge does not exist.'\n                        }\n                    break\n                    case 'add node':\n                        if (graph.nodeCount === 30) {\n                            throw 'node limit reached.'\n                        }\n                        if (!graph.hasNode(pc[1])) {\n                            actions.push(new Action('add node', graph.addNode(pc[1], style)))\n                        } else {\n                            throw 'node already exists.'\n                        }\n                    break\n                    case 'bfs':\n                        let node = pc.length === 1 ? null : pc[1]\n                        actions.push(Transformations.BFS(graph, node))\n                    break\n                    case 'cc':\n                        let nodes = pc.length === 1 ? null : pc.splice(1)\n                        actions.push(Transformations.completelyConnected(graph, style, nodes))\n                    break\n                    case 'color node':\n                        actions.push(Visualizations.color(graph, pc[1], pc[2]))\n                    break\n                    case 'color edge':\n                        actions.push(Visualizations.color(graph, [pc[1], pc[2]], pc[3], false))\n                    break\n                    case 'colorall':\n                        actions.push(Visualizations.colorAll(graph))\n                    break;\n                    case 'trans':\n                        actions.push(Transformations.transpose(graph, style))\n                    break\n                    case 'clear':\n                        actions.push(Transformations.clear(graph))\n                    break\n                    case 'kosaraju':\n                        actions.push(Transformations.kosaraju(graph, style))\n                    break\n                    case 'minst':\n                        src = pc[1]\n                        actions.push(Transformations.minst(graph, src))\n                    break\n                    case 'maxst':\n                        src = pc[1]\n                        actions.push(Transformations.maxst(graph, src))\n                    break\n                    case 'dijkstra':\n                        actions.push(Visualizations.dijkstra(graph, pc[1], pc[2]))\n                    break\n                    case 'belford':\n                        actions.push(Visualizations.bellmanFord(graph, pc[1], pc[2]))\n                    break\n                    case 'comp':\n                        actions.push(Transformations.complement(graph, style))\n                    break\n                    case 'eulcirc':\n                        actions.push(Visualizations.eulerianCircuit(graph))\n                    break\n                    case 'eulpat':\n                        actions.push(Visualizations.eulerianPath(graph))\n                    break\n                    case 'stowag':\n                        actions.push(Visualizations.stoerWagner(graph))\n                    break\n                    default:\n                        throw 'no command or bad command parse.'\n                }\n                this.setState({status: 'Good.', error: false})\n            } catch (err) {\n                this.setState({status: 'Bad, ' + err, error: true})\n            }\n        })\n        this.props.handleActions(actions, cmdList)\n    }\n\n    render() {\n\n        const lineArr = this.props.clState.asList()\n        const style = !this.state.error ? {backgroundColor: Colors.CELESTE, color: Colors.CELADON_BLUE}\n                                        : {backgroundColor: Colors.LIGHT_RED, color: Colors.DEEP_RED_2}\n\n        return (\n            <div id = 'command-line-interface' className = 'section' key = 'cli'>\n                <div className = 'section-label'> Command Line Interface </div>\n                <div id='cli-status-wrapper' style={style}> Command Status: {this.state.status}</div>\n                <div id = 'command-line-output'>\n                    {lineArr.map((item, index) => (\n                        <div key={index}>{item}</div>\n                    ))}\n                    <div ref={this.bottomRef}/>\n                </div>\n                <div id = 'input-line-wrapper' onKeyDown={this.handleKeyPress}>\n                    <input id = 'cursor' ref = {this.inputRef} placeholder='commands here'/>\n                </div>\n            </div>\n        )\n    }\n\n    scrollToBottom() {\n        this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    componentDidMount() {\n        this.scrollToBottom()\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom()\n    }\n\n}\n","import React from 'react'\nimport './css/CommandList.css'\n\nfunction Command(name, desc, constraints = []) {\n    return (\n        <div className = 'command-list-item'>\n            <div className = 'section-label'> {name} </div>\n            <p> {desc} </p>\n            <div id = 'constraint-list'>\n                {constraints.map((item, index) => (\n                    <div key={index} className = 'constraint'> {item}</div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport class CommandList extends React.Component {\n    render() {\n        return (\n            <div id = 'command-list' className = 'section' key = 'cl'>\n                <div className = 'section-label'> Command List </div>\n                <div>• A command may have a name and a list of arguments separated by spaces. </div>\n                <div>• Necessary arguments are denoted with brackets [ ] and optional arguments with curly braces {'{ }'}. </div>\n                <div>• In the Command Line Interface, do not actually include brackets or braces with arguments. </div>\n                {Command('name [necessary argument] {optional argument}', 'This is a sample command.', ['graph requirements'])}\n                <div className = 'divider-line' />\n                <div>\n                    {Command('[u]', 'Creates a new node labeled u.')}\n                    {Command('[u] [v] {w}', 'Creates a new edge from nodes u to v. You may optionally specify a weight, w. If the edge exists, the weight is updated to w.')}\n                    {Command('del [u]', 'Deletes node u.')}\n                    {Command('del [u] [v]', 'Deletes edge from nodes u to v.')}\n                    {Command('cc {u} {v} {w} . . .', 'If no arguments are specified then the command completely connects the graph. Otherwise only the specified nodes become completely connected.')}\n                    {Command('bfs {u}', 'Transforms the graph into a BFS tree rooted at u if specified. If u is not given, the root is a random node.')}\n                    {Command('trans', 'Turns the graph into its transpose.', ['directed'])}\n                    {Command('eulcirc', 'Visualizes an eulerian circuit if one exists.', ['undirected'])}\n                    {Command('eulpat', 'Visualizes an eulerian path if one exists.', ['undirected'])}\n                    {Command('comp', 'Turns the graph into its complement.', ['undirected'])}\n                    {Command('clear', 'Deletes all edges and nodes in the graph.')}\n                    {Command('colorall', 'Colors the graph with up to 4 colors.')}\n                    {Command('color [u] [col]', 'Changes the color of node u to col. col can be one of the following letters: r, g, b or v.')}\n                    {Command('color [u] [v] [col]', 'Changes the color of edge (u, v) to col. col can be one of the following letters: r, g, b or v.')}\n                    {Command('kosaraju', 'Transforms the graph into its corresponding strongly connected component graph.', ['directed'])}\n                    {Command('dijkstra [u] [v]', 'Colors the shortest path from nodes u to v if such a path exists.', ['weighted', 'non-negative'])}\n                    {Command('belford [u] [v]', 'Colors the shortest path from nodes u to v if such a path exists.', ['weighted', 'no negative cycles'])}\n                    {Command('minst {u}', 'Creates a minimum spanning tree rooted at node u. If u is not specified a random node is picked as the root node.', ['weighted', 'undirected'])}\n                    {Command('maxst {u}', 'Creates a maximum spanning tree rooted at node u. If u is not specified a random node is picked as the root node.', ['weighted', 'undirected'])}\n                    {Command('stowag', 'Visualizes the minimum cut also known as the max flow, on an undirected graph with the Stoer-Wagner algorithm.', ['undirected'])}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport './css/ToolBar.css'\n\nexport class ShareSect extends React.Component {\n    constructor(props) {\n        super(props)\n        this.fileInputRef = React.createRef()\n    }\n\n    getFile() {\n        return this.fileInputRef.current.files[0]\n    }\n\n    render() {\n        return (\n            <div className = 'toolbar-sect' id = 'share-sect' key = 'share'>\n                <div className = 'section-label'>Share</div>\n                <div id = 'share-options-list'>\n                    <button onClick={this.props.downloadPng}> download as png </button>\n                    <div className = 'divider-line' />\n                    <div>\n                        <div>Download a sharable JSON version of your graph.</div>\n                        <button onClick={this.props.downloadJSON}> export graph </button>\n                    </div>\n                    <div className = 'divider-line' />\n                    <div>\n                        <div> Import and load a graph. </div>\n                        <button onClick={this.props.readInJSON}> load imported graph </button>\n                        <input type='file'\n                            ref={this.fileInputRef}\n                            name='import'\n                            accept='.json, .JSON'\n                            className = 'custom-file-input' />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","export default function RawGraph(directed = true, weighted = false, simple = true) {\n\n    this.al = {}\n    this.w = {}\n    this.directed = directed\n    this.weighted = weighted\n    this.simple = simple\n\n    this.addNode = (n) => {\n        this.al[n] = []\n    }\n\n    this.addEdge = (u, v, w) => {\n        this.al[u].push(v)\n        if (!this.directed) {\n            this.al[v].push(u)\n        }\n        this.w[u + ' ' + v] = w\n    }\n\n    this.hasEdge = (u, v) => {\n        let hasIt = false\n        if (this.al.hasOwnProperty(u)) {\n            hasIt = this.al[u].indexOf(v) !== -1\n        } else if (!this.directed && this.al.hasOwnProperty(v)) {\n            hasIt = this.al[v].indexOf(u) !== -1\n        }\n        return hasIt\n    }\n\n    this.hasNode = (n) => {\n        return this.al.hasOwnProperty(n)\n    }\n\n    this.getAdjacencyList = (n) => {\n        if (this.al.hasOwnProperty(n)) {\n            return [...this.al[n]]\n        }\n        return []\n    }\n\n    this.getWeight = (u, v) => {\n        if (!this.weighted) {\n            return 1\n        }\n        let key = u + ' ' + v\n        if (this.w.hasOwnProperty(key)) {\n            return this.w[key]\n        }\n        key = v + ' ' + u\n        if (!this.directed && this.w.hasOwnProperty(key)) {\n            return this.w[key]\n        }\n        return 0\n    }\n\n    this.setWeight = (u, v, w) => {\n        let key = u + ' ' + v\n        if (this.w.hasOwnProperty(key)) {\n            this.w[key] = w\n            return this.w[key]\n        }\n        key = v + ' ' + u\n        if (!this.directed && this.w.hasOwnProperty(key)) {\n            this.w[key] = w\n            return this.w[key]\n        }\n        return 0\n    }\n    this.increaseWeight = (u, v, w) => {\n        this.setWeight(u, v, this.getWeight(u, v) + w)\n    }\n\n    this.getNodes = () => {\n        return Object.keys(this.al)\n    }\n\n    this.getEdges = () => {\n        let gc = this.clone()\n        let edges = []\n        gc.getNodes().forEach(node => {\n            while (gc.al[node].length > 0) {\n                edges.push([node, gc.al[node][0]])\n                gc.removeEdge(node, gc.al[node][0])\n            }\n        })\n        return edges\n    }\n\n    this.removeNode = (n) => {\n        delete this.al[n]\n    }\n\n    this.completelyRemoveNode = (n) => {\n        this.getAllEdgesIncidentOn(n).forEach(([u, v]) => {\n            this.removeEdge(u, v)\n        })\n        this.removeNode(n)\n    }\n\n    this.removeEdge = (u, v) => {\n        if (this.al.hasOwnProperty(u)) {\n            this.al[u].splice(this.al[u].indexOf(v), 1)\n            delete this.w[u + ' ' + v]\n        }\n        if (!this.directed && this.al.hasOwnProperty(v)) {\n            this.al[v].splice(this.al[v].indexOf(u), 1)\n            delete this.w[v + ' ' + u]\n        }\n    }\n\n    this.getAllEdgesIncidentOn = (node) => {\n        let edges = []\n        for (let u in this.al) {\n            if (u !== node && this.al[u].indexOf(node) !== -1) {\n                edges.push([u, node])\n            }\n        }\n        if (this.directed) {\n            this.al[node].forEach(v => {\n                edges.push([node, v])\n            })\n        }\n        return edges\n    }\n\n    this.getUnderlyingGraph = () => {\n        let ug = new RawGraph(false, this.weighted, this.simple)\n        let nodes = Object.keys(this.al)\n        nodes.forEach(node => {ug.addNode(node)})\n        for (let u in this.al) {\n            this.al[u].forEach(v => {\n                if (!ug.hasEdge(u, v)) {\n                    ug.addEdge(u, v)\n                }\n            })\n        }\n        return ug\n    }\n\n    this.getTranspose = () => {\n        let gt = new RawGraph(this.directed, this.weighted, this.simple)\n        let nodes = Object.keys(this.al)\n        nodes.forEach(node => {gt.addNode(node)})\n        for (let u in this.al) {\n            this.al[u].forEach(v => {\n                if (!gt.hasEdge(v, u)) {\n                    gt.addEdge(v, u)\n                }\n            })\n        }\n        return gt\n    }\n\n    this.clone = () => {\n        let gc = new RawGraph(this.directed, this.weighted)\n        Object.keys(this.al).forEach(key => {\n            gc.al[key] = [...this.al[key]]\n        })\n        Object.keys(this.w).forEach(key => {\n            gc.w[key] = this.w[key]\n        })\n        return gc\n    }\n\n}\n","export default function Edge(u, v, color, weight) {\n\n    this.u = u\n    this.v = v\n    this.bent = false\n    this.weight = weight\n    this.color = color\n    this.eulerianMarker = null\n    this.hamiltonianMarker = null\n\n}\n","export default function Node(label, radius, color, x, y) {\n\n    this.label = label\n    this.radius = radius\n    this.color = color\n\n    this.x = x\n    this.y = y\n\n}\n","/*eslint-disable*/\nimport RawGraph from './RawGraph.js'\nimport Edge from './Edge.js'\nimport Node from './Node.js'\n\nexport default function Graph(directed = true, weighted = false) {\n\n    this.directed = directed\n    this.weighted = weighted\n    this.simple = true\n\n    this.edges = {}\n    this.nodes = {}\n    this.nodeCount = 0\n    this.raw = new RawGraph(directed, weighted)\n\n    this.changeProp = (setting, value) => {\n        this[setting] = value\n        this.raw[setting] = value\n    }\n\n    this.hasEdge = function() {\n        let u, v\n        if (typeof arguments[0] === 'object') {\n            u = arguments[0].u.label\n            v = arguments[0].v.label\n        } else {\n            u = arguments[0]\n            v = arguments[1]\n        }\n        return this.raw.hasEdge(u, v)\n    }\n\n    this.getEdge = (u, v) => {\n        let key = this.edgeKey(u, v)\n        if (this.edges.hasOwnProperty(key)) {\n            return this.edges[key]\n        }\n        key = this.edgeKey(v, u)\n        if (!this.directed && this.edges.hasOwnProperty(key)) {\n            return this.edges[key]\n        }\n        return null\n    }\n\n    this.hasNode = function() {\n        // if the object passsed is a node\n        if (typeof arguments[0] === 'object') {\n            return this.raw.hasNode(arguments[0].label)\n        }\n        // otherwise if it is a label\n        return this.raw.hasNode(arguments[0])\n    }\n\n    this.addEdge = function() {\n        let edge, key, opkey, weight, u, v\n        if (arguments.length === 1) {\n            edge = arguments[0]\n            u = edge.u.label\n            v = edge.v.label\n            weight = edge.weight\n        } else {\n            u = arguments[0]\n            v = arguments[1]\n            const style = arguments[2]\n            const uNode = this.nodes[u]\n            const vNode = this.nodes[v]\n            weight = arguments[3] !== undefined ? (isNaN(arguments[3]) ? 1 : parseInt(arguments[3])) : style.weight\n            edge = new Edge(uNode, vNode, style.edgeColor, weight)\n        }\n\n        key = this.edgeKey(u, v)\n        opkey = this.edgeKey(v, u)\n\n        this.raw.addEdge(u, v, weight)\n        this.edges[key] = edge\n\n        if (this.directed && this.edges.hasOwnProperty(opkey)) {\n            this.edges[opkey].bent = true\n            this.edges[key].bent = true\n        }\n        return edge\n    }\n\n    this.addNode = function() {\n        let node, key\n        if (arguments.length === 1) {\n            node = arguments[0]\n            key = this.nodeKey(node.label)\n\n        } else {\n            let label = arguments[0]\n            let style = arguments[1]\n            let x, y\n            if (arguments.length === 4) {\n                x = arguments[2]\n                y = arguments[3]\n            } else {\n                const randPos = this.nextRandomNodePos()\n                x = randPos.x\n                y = randPos.y\n            }\n            node = new Node(label, style.nodeRadius, style.nodeColor, x, y)\n            key = this.nodeKey(label)\n        }\n        this.raw.addNode(key)\n        this.nodes[key] = node\n        this.nodeCount++\n        return node\n    }\n\n    this.removeNode = function() {\n        let node, key\n        if (typeof arguments[0] === 'object') {\n            node = arguments[0]\n            key = this.nodeKey(node.label)\n        } else {\n            key = this.nodeKey(arguments[0])\n            node = this.nodes[key]\n        }\n        this.raw.removeNode(key)\n        delete this.nodes[key]\n        this.nodeCount--\n        return node\n    }\n\n    this.removeEdge = function() {\n        let edge, key, opkey, u, v\n        if (typeof arguments[0] === 'object') {\n            edge = arguments[0]\n            u = edge.u.label\n            v = edge.v.label\n            key = this.edgeKey(u, v)\n            opkey = this.edgeKey(v, u)\n        } else {\n            u = arguments[0]\n            v = arguments[1]\n            if (this.edges[this.edgeKey(u, v)] === undefined && !this.directed) {\n                key = this.edgeKey(v, u)\n                opkey = this.edgeKey(u, v)\n            } else {\n                key = this.edgeKey(u, v)\n                opkey = this.edgeKey(v, u)\n            }\n            edge = this.edges[key]\n        }\n\n        this.raw.removeEdge(u, v)\n        delete this.edges[key]\n\n        if (this.directed && this.edges.hasOwnProperty(opkey)) {\n            this.edges[opkey].bent = false\n        }\n\n        return edge\n    }\n\n    this.getWeight = (u, v) => {\n        return this.raw.getWeight(u, v)\n    }\n\n    this.setWeight = (u, v, w) => {\n        this.raw.setWeight(u, v, w)\n    }\n\n    this.getAllEdgesIncidentOn = (node) => {\n        return this.raw.getAllEdgesIncidentOn(node)\n    }\n\n    this.getNodeVisuals = () => {\n        return Object.values(this.nodes)\n    }\n\n    this.getEdgeVisuals = () => {\n        return Object.values(this.edges)\n    }\n\n    this.getRawGraph = () => {\n        return this.raw.clone()\n    }\n\n    // helpers\n    this.edgeKey = (u, v) => {\n        return u + ' ' + v\n    }\n    this.nodeKey = (u) => {\n        return u.toString()\n    }\n    this.nextRandomNodePos = () => {\n        const dst = (this.nodeCount + 10) / (30 - 1)\n        const ang = Math.PI * 2 * 1.61803 /*golden ratio*/ * this.nodeCount\n        let x = 0.5 + (0.4 * dst * Math.cos(ang))\n        let y = 0.5 + (0.4 * dst * Math.sin(ang))\n        return {x, y}\n    }\n    this.getNextNodeLabel = () => {\n        let nums = Object.keys(this.nodes).filter(n => !isNaN(parseInt(n))).map(n2 => parseInt(n2))\n        let label = 1\n        while (nums.indexOf(label) !== -1) {\n            label++\n        }\n        return label.toString()\n    }\n}\n","export default function BoundedStack(max = 10) {\n\n    this.stack = []\n    this.max = max\n\n    this.push = (elt) => {\n        this.stack.push(elt)\n        if (this.stack.length > this.max) {\n            this.stack.shift()\n        }\n    }\n\n    this.pop = () => {\n        return this.stack.pop()\n    }\n\n    this.empty = () => {\n        return this.stack.length === 0\n    }\n    \n    this.clear = () => {\n        this.stack = []\n    }\n\n    this.peek = () => {\n        if (this.empty()) {\n            return null\n        }\n        return this.stack[this.stack.length - 1]\n    }\n\n    this.asSet = () => {return [...this.stack]}\n}\n","import BoundedStack from './BoundedStack.js'\nimport * as Parser from '../functions/CommandParsing.js'\n\nexport default function CommandLine() {\n\n    this.list = []\n    this.history = new BoundedStack()\n    //this.reg = new RegExp('[^A-Za-z0-9]+', 'g')\n\n    this.addCommand = (cmds) => {\n        this.list.push(cmds.join('; ') + ';')\n        this.history.clear()\n    }\n\n    this.removeLastCommand = () => {\n        if (this.list.length > 0) {\n            this.history.push(this.list.pop())\n        }\n    }\n\n    this.addFromHistory = () => {\n        if (!this.history.empty()) {\n            this.list.push(this.history.pop())\n        }\n    }\n\n    this.parseCommand = (cmd) => {\n\n        let params = cmd.split(' ').filter(param => param !== '')\n        if (params.length > 0) {\n            switch(params[0]) {\n                case 'bfs':\n                case 'cc':\n                case 'colorall':\n                case 'trans':\n                case 'clear':\n                case 'kosaraju':\n                case 'maxst':\n                case 'minst':\n                case 'dijkstra':\n                case 'belford':\n                case 'comp':\n                case 'eulcirc':\n                case 'eulpat':\n                case 'stowag':\n                    return params\n                case 'del':\n                    return Parser.parseDel(params)\n                case 'color':\n                    return Parser.parseColor(params)\n                default:\n                    return Parser.parseAdd(params)\n            }\n        }\n        return ['no command']\n    }\n\n    this.asList = () => {\n        return [...this.list]\n    }\n}\n","export function parseDel(p) {\n    p[0] = 'delete ' + (p.length === 3 ? 'edge' : 'node')\n    return p\n}\n\nexport function parseAdd(p) {\n    if (p.length === 1 && !p[0].includes('+')) {\n        return ['add node', p[0]]\n    } else {\n        return ['add edge'].concat(p)\n    }\n}\n\nexport function parseColor(p) {\n    if (p.length === 3) {\n        return ['color node', p[1], p[2]]\n    }\n    if (p.length === 4) {\n        return ['color edge', p[1], p[2], p[3]]\n    }\n    return ['no command']\n}\n","/* eslint-disable */\nimport Graph from '../data-structures/Graph.js'\n\nexport default function parseJSONInput(fgraph) {\n    if (!fgraph.hasOwnProperty('directed')) {\n        throw 'missing [directed] property'\n    }\n    if (!fgraph.hasOwnProperty('weighted')) {\n        throw 'missing [weighted] property'\n    }\n    if (!fgraph.hasOwnProperty('nodes')) {\n        throw 'missing [nodes] list'\n    }\n    if (!fgraph.hasOwnProperty('edges')) {\n        throw 'missing [edges] property'\n    }\n\n    let tgraph = new Graph(fgraph.directed, fgraph.weighted)\n    let nodes = Object.values(fgraph.nodes)\n    if (nodes.length > 30) {\n        throw 'graph exceeds node limit'\n    }\n    nodes.forEach(nv => {\n        if (!nv.hasOwnProperty('label')) {\n            throw 'a node is missing a label'\n        } else if (nv.label.includes('+')) {\n            throw 'a node label contains an invalid character'\n        }\n        let nvl = 'node ' + nv.label\n        if (!nv.hasOwnProperty('radius')) {\n            throw nvl + ' is missing a radius'\n        } else if (isNaN(nv.radius) || nv.radius < 5 || nv.radius > 20) {\n            throw nvl + ' has an invalid radius'\n        }\n        if (!nv.hasOwnProperty('color')) {\n            throw nvl + ' is missing a color'\n        }\n        if (!nv.hasOwnProperty('x')) {\n            throw nvl + ' is missing an x position'\n        } else if (nv.x < 0 || nv.x > 1) {\n            throw nvl + ' x position is out of range [0, 1]'\n        }\n        if (!nv.hasOwnProperty('y')) {\n            throw nvl + ' is missing a y position'\n        } else if (nv.y < 0 || nv.y > 1) {\n            throw nvl + ' y positin is out of range [0, 1]'\n        }\n        if (tgraph.hasNode(nv.label)) {\n            throw 'duplicate node names'\n        }\n        tgraph.addNode(nv)\n    })\n    Object.values(fgraph.edges).forEach(ev => {\n        if (!ev.hasOwnProperty('u') || !ev.hasOwnProperty('v')) {\n            throw 'an edge is missing one or more nodes'\n        }\n        let evl = 'edge ' + ev.u.label + ' ' + ev.v.label\n        if (!ev.hasOwnProperty('weight')) {\n            throw  evl + ' has no [weight] property'\n        } else if (isNaN(ev.weight) || Math.abs(ev.weight) > 100) {\n            throw evl + ' has an invalid weight property'\n        }\n        if (!ev.hasOwnProperty('color')) {\n            throw evl + ' has no [color] property'\n        } else if (!isColor(ev.color)) {\n            throw evl + ' has an invalid color'\n        }\n        if (!ev.hasOwnProperty('bent')) {\n            throw evl + ' has no [bent] property'\n        } else if (typeof ev.bent !== 'boolean') {\n            throw evl + ' has an invalid bent property'\n        }\n        if (!ev.hasOwnProperty('eulerianMarker')) {\n            throw evl + ' has no [eulerianMarker] property'\n        } else if (isNaN(ev.eulerianMarker)) {\n            throw evl + ' has an invalid eulerianMarker'\n        }\n\n        if (tgraph.hasEdge(ev.u.label, ev.v.label)) {\n            throw 'duplicate edge'\n        }\n        if (!tgraph.hasNode(ev.u) || !tgraph.hasNode(ev.v)) {\n            throw 'one or more nodes do not exist for an edge'\n        }\n        let edge = tgraph.addEdge(ev.u.label, ev.v.label, {edgeColor: ev.color}, ev.weight)\n        edge.eulerianMarker = ev.eulerianMarker\n        edge.bent = ev.bent\n    })\n    return tgraph\n}\n\nconst COLOR_REGEX = /#([0-9]|[A-F]){6}/g\n\nfunction isColor(str){\n    let match = str.match(COLOR_REGEX)\n    return match !== null && match.length === 1\n}\n","/* eslint-disable */\nimport React from 'react'\nimport { GraphToolBar } from './components/ToolBarComponents'\nimport { GraphRender } from './components/RenderingComponents'\nimport { GraphPropsList } from './components/GraphProps'\nimport { StateManager } from './components/StateManagerComponents'\nimport { CLI } from './components/CommandLineInterface'\nimport { CommandList } from './components/CommandList.js'\nimport { ShareSect } from './components/ShareComponent.js'\nimport Graph from './data-structures/Graph.js'\nimport BoundedStack from './data-structures/BoundedStack.js'\nimport CommandLine from './data-structures/CommandLine.js'\nimport * as Downloads from './functions/Downloads.js'\nimport './GraphTool.css'\n\nimport parseJSONInput from './functions/JSONParser.js'\n\nexport default class GraphTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            // tool settings represents node/edge state as they are added\n            toolSettings: {\n\n                // nodes\n                nodeRadius: 10,\n                nodeColor: '#000000',\n\n                // edges\n                weight: 1,\n                edgeColor: '#000000'\n\n            },\n\n            undoStack: new BoundedStack(),\n            redoStack: new BoundedStack(),\n            commandLine: new CommandLine(),\n\n            // real graph data\n            graph: new Graph()\n\n        }\n        this.changeToolSetting = this.changeToolSetting.bind(this)\n        this.changeGraphSetting = this.changeGraphSetting.bind(this)\n        this.handleActions = this.handleActions.bind(this)\n        this.downloadPng = this.downloadPng.bind(this)\n        this.downloadJSON = this.downloadJSON.bind(this)\n        this.readInJSON = this.readInJSON.bind(this)\n        this.clear = this.clear.bind(this)\n        this.undo = this.undo.bind(this)\n        this.redo = this.redo.bind(this)\n        this.renderingRef = React.createRef()\n        this.shareSectRef = React.createRef()\n    }\n\n    downloadPng() {\n        Downloads.downloadPng(this.renderingRef.current.getPngURI())\n    }\n\n    downloadJSON() {\n        Downloads.downloadJSON(JSON.stringify(this.state.graph))\n    }\n\n    readInJSON() {\n        let file = (this.shareSectRef.current.getFile())\n        if (file === undefined) {\n            return\n        }\n        let reader = new FileReader()\n        reader.readAsText(file)\n        reader.onload = () => {\n            this.makeGraph(JSON.parse(reader.result))\n        }\n    }\n\n    makeGraph(fgraph) {\n        try {\n            let tgraph = parseJSONInput(fgraph)\n            this.setState({\n                graph: tgraph,\n                undoStack: new BoundedStack(),\n                redoStack: new BoundedStack(),\n                commandLine: new CommandLine()\n            })\n        } catch (err) {\n            alert('JSON Parsing Error: ' + err)\n        }\n    }\n\n    changeToolSetting(setting, value) {\n        let toolSettings = this.state.toolSettings\n        toolSettings[setting] = value\n        this.forceUpdate()\n    }\n\n    changeGraphSetting(setting, value) {\n        let graph = this.state.graph\n        graph.changeProp(setting, value)\n        if (setting === 'directed') {\n            this.state.redoStack.clear()\n            this.state.undoStack.clear()\n        }\n        this.forceUpdate()\n    }\n\n    clear(){\n        this.setState({\n            graph: new Graph(this.state.graph.directed, this.state.graph.weighted),\n            undoStack: new BoundedStack(),\n            redoStack: new BoundedStack(),\n            commandLine: new CommandLine()\n        })\n    }\n\n    handleActions(actions, cmdList) {\n        if (actions.length === 0) {\n            return\n        }\n        this.state.undoStack.push(actions)\n        this.state.commandLine.addCommand(cmdList)\n        this.setState({redoStack: new BoundedStack()})\n    }\n\n    redoActions(actions) {\n        actions.forEach(elt => {\n            if (Array.isArray(elt)) {\n                this.redoActions(elt)\n            } else {\n                const name = elt.privateString\n                const item = elt.item\n                const graph = this.state.graph\n                let curr, node, edge\n                switch (name) {\n                    case 'add node':\n                        graph.addNode(item)\n                    break\n                    case 'delete node':\n                        graph.removeNode(item)\n                    break\n                    case 'add edge':\n                        graph.addEdge(item)\n                    break\n                    case 'delete edge':\n                        graph.removeEdge(item)\n                    break\n                    case 'color node':\n                        curr = item.curr\n                        node = item.node\n                        node.color = curr\n                    break\n                    case 'color edge':\n                        curr = item.curr\n                        edge = item.edge\n                        edge.color = curr\n                    break\n                    case 'eulerian mark':\n                        item.edge.eulerianMarker = item.mark\n                    break\n                }\n            }\n        })\n    }\n\n    redo() {\n        let lastActions = this.state.redoStack.pop()\n        this.redoActions(lastActions)\n        this.state.undoStack.push(lastActions)\n        this.state.commandLine.addFromHistory()\n        this.forceUpdate()\n    }\n\n    undoActions(actions) {\n        for (let i = actions.length - 1; i >= 0; i--) {\n            let elt = actions[i]\n            if (Array.isArray(elt)) {\n                this.undoActions(elt)\n            } else {\n                const name = elt.privateString\n                const item = elt.item\n                const graph = this.state.graph\n                let prev, edge, node\n                switch (name) {\n                    case 'add node':\n                        graph.removeNode(item)\n                    break\n                    case 'delete node':\n                        graph.addNode(item)\n                    break\n                    case 'add edge':\n                        graph.removeEdge(item)\n                    break\n                    case 'delete edge':\n                        graph.addEdge(item)\n                    break\n                    case 'color node':\n                        prev = item.prev\n                        node = item.node\n                        node.color = prev\n                    break\n                    case 'color edge':\n                        prev = item.prev\n                        edge = item.edge\n                        edge.color = prev\n                    break\n                    case 'eulerian mark':\n                        item.edge.eulerianMarker = item.prev\n                    break\n                }\n            }\n        }\n    }\n\n    undo() {\n        let lastActions = this.state.undoStack.pop()\n        this.undoActions(lastActions)\n        this.state.redoStack.push(lastActions)\n        this.state.commandLine.removeLastCommand()\n        this.forceUpdate()\n    }\n\n    render() {\n\n        // console.log('__________________________')\n        // console.log(this.state.graph.directed)\n        // console.log(this.state.graph.edges)\n        // console.log(this.state.graph.raw.al)\n\n        return (\n            <div id = 'graph-tool-wrapper'>\n                <div id = 'rendering-and-commands'>\n                    <GraphRender\n                        ref={this.renderingRef}\n                        graph={this.state.graph}\n                        style={this.state.toolSettings}\n                        handleActions={this.handleActions}\n                    />\n                    <div id = 'command-items' className = 'spaced'>\n                        <CommandList />\n                        <CLI clState={this.state.commandLine}\n                            graph={this.state.graph}\n                            style={this.state.toolSettings}\n                            handleActions={this.handleActions}\n                        />\n                    </div>\n                </div>\n                <div id = 'tool-bar-and-props'>\n                    <div id = 'tool-bar' className = 'section spaced'>\n                        <div className = 'section-label'> Tool Bar </div>\n                        <div id = 'tool-bar-content'>\n                            <GraphToolBar\n                                toolSettings={this.state.toolSettings}\n                                changeFunc={this.changeToolSetting} />\n                            <StateManager\n                                clearFunc={this.clear}\n                                undoFunc={this.undo}\n                                redoFunc={this.redo}\n                                canRedo={!this.state.redoStack.empty()}\n                                canUndo={!this.state.undoStack.empty()}\n                                edgeCount={this.state.graph.getEdgeVisuals().length}\n                                changeFunc={this.changeGraphSetting}/>\n                            <ShareSect\n                                ref={this.shareSectRef}\n                                downloadPng={this.downloadPng}\n                                downloadJSON={this.downloadJSON}\n                                readInJSON={this.readInJSON}/>\n                        </div>\n                    </div>\n                    <GraphPropsList graph = {this.state.graph.getRawGraph()} />\n                </div>\n            </div>\n        )\n    }\n}\n","export function downloadPng(uri) {\n    var element = document.createElement('a')\n    element.setAttribute('href', uri)\n    element.setAttribute('download', 'graph.png')\n    element.style.display = 'none'\n    document.body.appendChild(element)\n    element.click()\n    document.body.removeChild(element)\n}\n\nexport function downloadJSON(json) {\n    var element = document.createElement('a')\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(json)\n    element.setAttribute('href', dataStr)\n    element.setAttribute('download', 'graph_data.JSON')\n    element.style.display = 'none'\n    document.body.appendChild(element)\n    element.click()\n    document.body.removeChild(element)\n}\n","import React from 'react'\nimport './Home.css'\n\nexport default class Home extends React.Component {\n    render() {\n        const funcs = ['Eulerian Path', 'Eulerian Circuit', 'K-Coloring', 'Minimum Spanning Tree',\n        'Maximum Spanning Tree', 'Dijkstra\\'s Algorithm', 'Bellman Ford Algorithm', 'Stoer Wagner Algorithm',\n        'Kosaraju\\'s Algorithm', 'Breadth First Search', 'Graph Complement', 'Graph Transpose']\n        return (\n            <div id = 'home-features-list'>\n                <div>\n                    <div className = 'title'> Welcome to [name]! </div>\n                    <img src='bonk' alt='cute image from graphing tool'></img>\n                    <div> A free, simple and efficient graphing tool for Computer Science students. </div>\n                    <a href='https://github.com'> (and now open source!) </a>\n                    <div>\n                        [name] is an ever evolving graphing library and tool that strives to be useful to\n                        Computer Science students through:\n                    </div>\n                </div>\n                <div className = 'feature-sect'>\n                    <div id = 'design'>\n                        <div className='subtitle'>Intuative and Simple Design</div>\n                        <div> blah blah blah UX and UI choices blah blah</div>\n                    </div>\n                    <img alt='(gif of simple use)' className='disp' />\n                </div>\n                <div className = 'feature-sect'>\n                    <div className = 'disp'>\n                        <img alt='why' />\n                    </div>\n\n                    <div id = 'efficiency'>\n                        <div className='subtitle'> Efficiency and Coder Accessibility </div>\n                        <div> designed for programmers blah blah command line interface streamlines process blah blah </div>\n                    </div>\n                </div>\n                <div className = 'feature-sect'>\n                    <div id = 'functionality'>\n                        <div className='subtitle'> Large and Increasing Functionality </div>\n                        <div> [name] features an ever growing list of useful algorithms and features. </div>\n                    </div>\n                    <div className='disp' id = 'functions-list-wrapper'>\n                        <div id = 'functions-list'>\n                            {funcs.map((item, index) => {\n                                return <div key={index}>{item}</div>\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\nimport './Menu.css'\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <div id = 'menubar'>\n                <Link to=\"/home\">Home</Link>\n                <Link to=\"/tutorial\">Tutorials</Link>\n                <Link to=\"/graph\">Graph</Link>\n                <Link to=\"/devblog\">Dev Blog</Link>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default class Tutorial extends React.Component {\n    render() {\n        return (\n            <div> tutorials </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default class DevBlog extends React.Component {\n    render() {\n        return (\n            <div> dev blog </div>\n        )\n    }\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport GraphTool from './graph-tool/GraphTool.js'\nimport Home from './components/home/Home.js'\nimport MenuBar from './components/menubar/MenuBar.js'\nimport Tutorial from './components/tutorial/Tutorial.js'\nimport DevBlog from './components/devblog/DevBlog.js'\n\nfunction App() {\n    return (\n            <Router>\n                <MenuBar />\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/home\" component={Home} />\n                <Route path=\"/devblog\" component={DevBlog} />\n                <Route path=\"/tutorial\" component={Tutorial} />\n                <Route path=\"/graph\" component={GraphTool} />\n            </Router>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}